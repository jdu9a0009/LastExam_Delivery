// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: delivery_tariff.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryTariffServiceClient is the client API for DeliveryTariffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryTariffServiceClient interface {
	Create(ctx context.Context, in *CreateDeliveryTariffRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeliveryTariff, error)
	List(ctx context.Context, in *ListDeliveryTariffRequest, opts ...grpc.CallOption) (*ListDeliveryTariffResponse, error)
	Update(ctx context.Context, in *UpdateDeliveryTariffRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
}

type deliveryTariffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryTariffServiceClient(cc grpc.ClientConnInterface) DeliveryTariffServiceClient {
	return &deliveryTariffServiceClient{cc}
}

func (c *deliveryTariffServiceClient) Create(ctx context.Context, in *CreateDeliveryTariffRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/order_service.DeliveryTariffService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTariffServiceClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeliveryTariff, error) {
	out := new(DeliveryTariff)
	err := c.cc.Invoke(ctx, "/order_service.DeliveryTariffService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTariffServiceClient) List(ctx context.Context, in *ListDeliveryTariffRequest, opts ...grpc.CallOption) (*ListDeliveryTariffResponse, error) {
	out := new(ListDeliveryTariffResponse)
	err := c.cc.Invoke(ctx, "/order_service.DeliveryTariffService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTariffServiceClient) Update(ctx context.Context, in *UpdateDeliveryTariffRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/order_service.DeliveryTariffService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTariffServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/order_service.DeliveryTariffService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryTariffServiceServer is the server API for DeliveryTariffService service.
// All implementations must embed UnimplementedDeliveryTariffServiceServer
// for forward compatibility
type DeliveryTariffServiceServer interface {
	Create(context.Context, *CreateDeliveryTariffRequest) (*Response, error)
	Get(context.Context, *IdRequest) (*DeliveryTariff, error)
	List(context.Context, *ListDeliveryTariffRequest) (*ListDeliveryTariffResponse, error)
	Update(context.Context, *UpdateDeliveryTariffRequest) (*Response, error)
	Delete(context.Context, *IdRequest) (*Response, error)
	mustEmbedUnimplementedDeliveryTariffServiceServer()
}

// UnimplementedDeliveryTariffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryTariffServiceServer struct {
}

func (UnimplementedDeliveryTariffServiceServer) Create(context.Context, *CreateDeliveryTariffRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeliveryTariffServiceServer) Get(context.Context, *IdRequest) (*DeliveryTariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeliveryTariffServiceServer) List(context.Context, *ListDeliveryTariffRequest) (*ListDeliveryTariffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeliveryTariffServiceServer) Update(context.Context, *UpdateDeliveryTariffRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeliveryTariffServiceServer) Delete(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeliveryTariffServiceServer) mustEmbedUnimplementedDeliveryTariffServiceServer() {}

// UnsafeDeliveryTariffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryTariffServiceServer will
// result in compilation errors.
type UnsafeDeliveryTariffServiceServer interface {
	mustEmbedUnimplementedDeliveryTariffServiceServer()
}

func RegisterDeliveryTariffServiceServer(s grpc.ServiceRegistrar, srv DeliveryTariffServiceServer) {
	s.RegisterService(&DeliveryTariffService_ServiceDesc, srv)
}

func _DeliveryTariffService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryTariffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTariffServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.DeliveryTariffService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTariffServiceServer).Create(ctx, req.(*CreateDeliveryTariffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTariffService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTariffServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.DeliveryTariffService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTariffServiceServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTariffService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryTariffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTariffServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.DeliveryTariffService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTariffServiceServer).List(ctx, req.(*ListDeliveryTariffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTariffService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryTariffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTariffServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.DeliveryTariffService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTariffServiceServer).Update(ctx, req.(*UpdateDeliveryTariffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTariffService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTariffServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.DeliveryTariffService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTariffServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryTariffService_ServiceDesc is the grpc.ServiceDesc for DeliveryTariffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryTariffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.DeliveryTariffService",
	HandlerType: (*DeliveryTariffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DeliveryTariffService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DeliveryTariffService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeliveryTariffService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeliveryTariffService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeliveryTariffService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery_tariff.proto",
}
